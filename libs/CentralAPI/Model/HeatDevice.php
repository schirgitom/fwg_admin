<?php
/**
 * HeatDevice
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Central FWG API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FWGCentralAPI\Model;

use \ArrayAccess;
use \FWGCentralAPI\ObjectSerializer;

/**
 * HeatDevice Class Doc Comment
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HeatDevice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HeatDevice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device_id' => 'string',
        'topic' => 'string',
        'f_k_block' => 'int',
        'device_vendor' => 'string',
        'f_k_customer' => 'int',
        'active' => 'bool',
        'device_name' => 'string',
        'device_type' => 'string',
        'database_name' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device_id' => null,
        'topic' => null,
        'f_k_block' => 'int32',
        'device_vendor' => null,
        'f_k_customer' => 'int32',
        'active' => null,
        'device_name' => null,
        'device_type' => null,
        'database_name' => null,
        'id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'device_id' => false,
        'topic' => false,
        'f_k_block' => false,
        'device_vendor' => false,
        'f_k_customer' => false,
        'active' => false,
        'device_name' => false,
        'device_type' => true,
        'database_name' => true,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_id' => 'deviceID',
        'topic' => 'topic',
        'f_k_block' => 'fK_Block',
        'device_vendor' => 'deviceVendor',
        'f_k_customer' => 'fK_Customer',
        'active' => 'active',
        'device_name' => 'deviceName',
        'device_type' => 'deviceType',
        'database_name' => 'databaseName',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_id' => 'setDeviceId',
        'topic' => 'setTopic',
        'f_k_block' => 'setFKBlock',
        'device_vendor' => 'setDeviceVendor',
        'f_k_customer' => 'setFKCustomer',
        'active' => 'setActive',
        'device_name' => 'setDeviceName',
        'device_type' => 'setDeviceType',
        'database_name' => 'setDatabaseName',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_id' => 'getDeviceId',
        'topic' => 'getTopic',
        'f_k_block' => 'getFKBlock',
        'device_vendor' => 'getDeviceVendor',
        'f_k_customer' => 'getFKCustomer',
        'active' => 'getActive',
        'device_name' => 'getDeviceName',
        'device_type' => 'getDeviceType',
        'database_name' => 'getDatabaseName',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('f_k_block', $data ?? [], null);
        $this->setIfExists('device_vendor', $data ?? [], null);
        $this->setIfExists('f_k_customer', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('database_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['device_id'] === null) {
            $invalidProperties[] = "'device_id' can't be null";
        }
        if ((mb_strlen($this->container['device_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'device_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if ((mb_strlen($this->container['topic']) < 1)) {
            $invalidProperties[] = "invalid value for 'topic', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['f_k_block'] === null) {
            $invalidProperties[] = "'f_k_block' can't be null";
        }
        if ($this->container['device_vendor'] === null) {
            $invalidProperties[] = "'device_vendor' can't be null";
        }
        if ((mb_strlen($this->container['device_vendor']) < 1)) {
            $invalidProperties[] = "invalid value for 'device_vendor', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['f_k_customer'] === null) {
            $invalidProperties[] = "'f_k_customer' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['device_name'] === null) {
            $invalidProperties[] = "'device_name' can't be null";
        }
        if ((mb_strlen($this->container['device_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'device_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id device_id
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }

        if ((mb_strlen($device_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $device_id when calling HeatDevice., must be bigger than or equal to 1.');
        }

        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string $topic topic
     *
     * @return self
     */
    public function setTopic($topic)
    {
        if (is_null($topic)) {
            throw new \InvalidArgumentException('non-nullable topic cannot be null');
        }

        if ((mb_strlen($topic) < 1)) {
            throw new \InvalidArgumentException('invalid length for $topic when calling HeatDevice., must be bigger than or equal to 1.');
        }

        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets f_k_block
     *
     * @return int
     */
    public function getFKBlock()
    {
        return $this->container['f_k_block'];
    }

    /**
     * Sets f_k_block
     *
     * @param int $f_k_block f_k_block
     *
     * @return self
     */
    public function setFKBlock($f_k_block)
    {
        if (is_null($f_k_block)) {
            throw new \InvalidArgumentException('non-nullable f_k_block cannot be null');
        }
        $this->container['f_k_block'] = $f_k_block;

        return $this;
    }

    /**
     * Gets device_vendor
     *
     * @return string
     */
    public function getDeviceVendor()
    {
        return $this->container['device_vendor'];
    }

    /**
     * Sets device_vendor
     *
     * @param string $device_vendor device_vendor
     *
     * @return self
     */
    public function setDeviceVendor($device_vendor)
    {
        if (is_null($device_vendor)) {
            throw new \InvalidArgumentException('non-nullable device_vendor cannot be null');
        }

        if ((mb_strlen($device_vendor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $device_vendor when calling HeatDevice., must be bigger than or equal to 1.');
        }

        $this->container['device_vendor'] = $device_vendor;

        return $this;
    }

    /**
     * Gets f_k_customer
     *
     * @return int
     */
    public function getFKCustomer()
    {
        return $this->container['f_k_customer'];
    }

    /**
     * Sets f_k_customer
     *
     * @param int $f_k_customer f_k_customer
     *
     * @return self
     */
    public function setFKCustomer($f_k_customer)
    {
        if (is_null($f_k_customer)) {
            throw new \InvalidArgumentException('non-nullable f_k_customer cannot be null');
        }
        $this->container['f_k_customer'] = $f_k_customer;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name device_name
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            throw new \InvalidArgumentException('non-nullable device_name cannot be null');
        }

        if ((mb_strlen($device_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $device_name when calling HeatDevice., must be bigger than or equal to 1.');
        }

        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type device_type
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            array_push($this->openAPINullablesSetToNull, 'device_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets database_name
     *
     * @return string|null
     */
    public function getDatabaseName()
    {
        return $this->container['database_name'];
    }

    /**
     * Sets database_name
     *
     * @param string|null $database_name database_name
     *
     * @return self
     */
    public function setDatabaseName($database_name)
    {
        if (is_null($database_name)) {
            array_push($this->openAPINullablesSetToNull, 'database_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('database_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['database_name'] = $database_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


