<?php
/**
 * Line
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Central FWG API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FWGCentralAPI\Model;

use \ArrayAccess;
use \FWGCentralAPI\ObjectSerializer;

/**
 * Line Class Doc Comment
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Line implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Line';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'line_name' => 'string',
        'host' => 'string',
        'port' => 'int',
        'username' => 'string',
        'password' => 'string',
        'ssl_mode' => 'string',
        'pooling' => 'bool',
        'max_pool_size' => 'int',
        'min_pool_size' => 'int',
        'connection_timeout' => 'int',
        'command_timeout' => 'int',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'line_name' => null,
        'host' => null,
        'port' => 'int32',
        'username' => null,
        'password' => null,
        'ssl_mode' => null,
        'pooling' => null,
        'max_pool_size' => 'int32',
        'min_pool_size' => 'int32',
        'connection_timeout' => 'int32',
        'command_timeout' => 'int32',
        'id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'line_name' => false,
        'host' => false,
        'port' => false,
        'username' => false,
        'password' => false,
        'ssl_mode' => true,
        'pooling' => true,
        'max_pool_size' => true,
        'min_pool_size' => true,
        'connection_timeout' => true,
        'command_timeout' => true,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_name' => 'lineName',
        'host' => 'host',
        'port' => 'port',
        'username' => 'username',
        'password' => 'password',
        'ssl_mode' => 'sslMode',
        'pooling' => 'pooling',
        'max_pool_size' => 'maxPoolSize',
        'min_pool_size' => 'minPoolSize',
        'connection_timeout' => 'connectionTimeout',
        'command_timeout' => 'commandTimeout',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_name' => 'setLineName',
        'host' => 'setHost',
        'port' => 'setPort',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'ssl_mode' => 'setSslMode',
        'pooling' => 'setPooling',
        'max_pool_size' => 'setMaxPoolSize',
        'min_pool_size' => 'setMinPoolSize',
        'connection_timeout' => 'setConnectionTimeout',
        'command_timeout' => 'setCommandTimeout',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_name' => 'getLineName',
        'host' => 'getHost',
        'port' => 'getPort',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'ssl_mode' => 'getSslMode',
        'pooling' => 'getPooling',
        'max_pool_size' => 'getMaxPoolSize',
        'min_pool_size' => 'getMinPoolSize',
        'connection_timeout' => 'getConnectionTimeout',
        'command_timeout' => 'getCommandTimeout',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('line_name', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('ssl_mode', $data ?? [], null);
        $this->setIfExists('pooling', $data ?? [], null);
        $this->setIfExists('max_pool_size', $data ?? [], null);
        $this->setIfExists('min_pool_size', $data ?? [], null);
        $this->setIfExists('connection_timeout', $data ?? [], null);
        $this->setIfExists('command_timeout', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_name'] === null) {
            $invalidProperties[] = "'line_name' can't be null";
        }
        if ((mb_strlen($this->container['line_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'line_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        if ((mb_strlen($this->container['host']) < 1)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['port'] === null) {
            $invalidProperties[] = "'port' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_name
     *
     * @return string
     */
    public function getLineName()
    {
        return $this->container['line_name'];
    }

    /**
     * Sets line_name
     *
     * @param string $line_name line_name
     *
     * @return self
     */
    public function setLineName($line_name)
    {
        if (is_null($line_name)) {
            throw new \InvalidArgumentException('non-nullable line_name cannot be null');
        }

        if ((mb_strlen($line_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line_name when calling Line., must be bigger than or equal to 1.');
        }

        $this->container['line_name'] = $line_name;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }

        if ((mb_strlen($host) < 1)) {
            throw new \InvalidArgumentException('invalid length for $host when calling Line., must be bigger than or equal to 1.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return self
     */
    public function setPort($port)
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling Line., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Line., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets ssl_mode
     *
     * @return string|null
     */
    public function getSslMode()
    {
        return $this->container['ssl_mode'];
    }

    /**
     * Sets ssl_mode
     *
     * @param string|null $ssl_mode ssl_mode
     *
     * @return self
     */
    public function setSslMode($ssl_mode)
    {
        if (is_null($ssl_mode)) {
            array_push($this->openAPINullablesSetToNull, 'ssl_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ssl_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ssl_mode'] = $ssl_mode;

        return $this;
    }

    /**
     * Gets pooling
     *
     * @return bool|null
     */
    public function getPooling()
    {
        return $this->container['pooling'];
    }

    /**
     * Sets pooling
     *
     * @param bool|null $pooling pooling
     *
     * @return self
     */
    public function setPooling($pooling)
    {
        if (is_null($pooling)) {
            array_push($this->openAPINullablesSetToNull, 'pooling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pooling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pooling'] = $pooling;

        return $this;
    }

    /**
     * Gets max_pool_size
     *
     * @return int|null
     */
    public function getMaxPoolSize()
    {
        return $this->container['max_pool_size'];
    }

    /**
     * Sets max_pool_size
     *
     * @param int|null $max_pool_size max_pool_size
     *
     * @return self
     */
    public function setMaxPoolSize($max_pool_size)
    {
        if (is_null($max_pool_size)) {
            array_push($this->openAPINullablesSetToNull, 'max_pool_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_pool_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_pool_size'] = $max_pool_size;

        return $this;
    }

    /**
     * Gets min_pool_size
     *
     * @return int|null
     */
    public function getMinPoolSize()
    {
        return $this->container['min_pool_size'];
    }

    /**
     * Sets min_pool_size
     *
     * @param int|null $min_pool_size min_pool_size
     *
     * @return self
     */
    public function setMinPoolSize($min_pool_size)
    {
        if (is_null($min_pool_size)) {
            array_push($this->openAPINullablesSetToNull, 'min_pool_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_pool_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_pool_size'] = $min_pool_size;

        return $this;
    }

    /**
     * Gets connection_timeout
     *
     * @return int|null
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param int|null $connection_timeout connection_timeout
     *
     * @return self
     */
    public function setConnectionTimeout($connection_timeout)
    {
        if (is_null($connection_timeout)) {
            array_push($this->openAPINullablesSetToNull, 'connection_timeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('connection_timeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }

    /**
     * Gets command_timeout
     *
     * @return int|null
     */
    public function getCommandTimeout()
    {
        return $this->container['command_timeout'];
    }

    /**
     * Sets command_timeout
     *
     * @param int|null $command_timeout command_timeout
     *
     * @return self
     */
    public function setCommandTimeout($command_timeout)
    {
        if (is_null($command_timeout)) {
            array_push($this->openAPINullablesSetToNull, 'command_timeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('command_timeout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['command_timeout'] = $command_timeout;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


