<?php
/**
 * HeatDeviceApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Central FWG API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FWGCentralAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FWGCentralAPI\ApiException;
use FWGCentralAPI\Configuration;
use FWGCentralAPI\FormDataProcessor;
use FWGCentralAPI\HeaderSelector;
use FWGCentralAPI\ObjectSerializer;

/**
 * HeatDeviceApi Class Doc Comment
 *
 * @category Class
 * @package  FWGCentralAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeatDeviceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiHeatDeviceAllGet' => [
            'application/json',
        ],
        'apiHeatDeviceGetByDeviceIDDeviceIDGet' => [
            'application/json',
        ],
        'apiHeatDeviceGetForCustomerCustomerIDGet' => [
            'application/json',
        ],
        'apiHeatDeviceIdGet' => [
            'application/json',
        ],
        'apiHeatDeviceIdPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiHeatDevicePost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiHeatDeviceAllGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceAllGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDevice[]
     */
    public function apiHeatDeviceAllGet(string $contentType = self::contentTypes['apiHeatDeviceAllGet'][0])
    {
        list($response) = $this->apiHeatDeviceAllGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiHeatDeviceAllGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceAllGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDevice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDeviceAllGetWithHttpInfo(string $contentType = self::contentTypes['apiHeatDeviceAllGet'][0])
    {
        $request = $this->apiHeatDeviceAllGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDevice[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDevice[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDevice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDeviceAllGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceAllGetAsync(string $contentType = self::contentTypes['apiHeatDeviceAllGet'][0])
    {
        return $this->apiHeatDeviceAllGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDeviceAllGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceAllGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiHeatDeviceAllGet'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDevice[]';
        $request = $this->apiHeatDeviceAllGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDeviceAllGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDeviceAllGetRequest(string $contentType = self::contentTypes['apiHeatDeviceAllGet'][0])
    {


        $resourcePath = '/api/HeatDevice/All';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiHeatDeviceGetByDeviceIDDeviceIDGet
     *
     * @param  string $device_id device_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDevice
     */
    public function apiHeatDeviceGetByDeviceIDDeviceIDGet($device_id, string $contentType = self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'][0])
    {
        list($response) = $this->apiHeatDeviceGetByDeviceIDDeviceIDGetWithHttpInfo($device_id, $contentType);
        return $response;
    }

    /**
     * Operation apiHeatDeviceGetByDeviceIDDeviceIDGetWithHttpInfo
     *
     * @param  string $device_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDevice, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDeviceGetByDeviceIDDeviceIDGetWithHttpInfo($device_id, string $contentType = self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'][0])
    {
        $request = $this->apiHeatDeviceGetByDeviceIDDeviceIDGetRequest($device_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDevice',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDevice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDevice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDeviceGetByDeviceIDDeviceIDGetAsync
     *
     * @param  string $device_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceGetByDeviceIDDeviceIDGetAsync($device_id, string $contentType = self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'][0])
    {
        return $this->apiHeatDeviceGetByDeviceIDDeviceIDGetAsyncWithHttpInfo($device_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDeviceGetByDeviceIDDeviceIDGetAsyncWithHttpInfo
     *
     * @param  string $device_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceGetByDeviceIDDeviceIDGetAsyncWithHttpInfo($device_id, string $contentType = self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDevice';
        $request = $this->apiHeatDeviceGetByDeviceIDDeviceIDGetRequest($device_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDeviceGetByDeviceIDDeviceIDGet'
     *
     * @param  string $device_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDeviceGetByDeviceIDDeviceIDGetRequest($device_id, string $contentType = self::contentTypes['apiHeatDeviceGetByDeviceIDDeviceIDGet'][0])
    {

        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling apiHeatDeviceGetByDeviceIDDeviceIDGet'
            );
        }


        $resourcePath = '/api/HeatDevice/GetByDeviceID/{DeviceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DeviceID' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiHeatDeviceGetForCustomerCustomerIDGet
     *
     * @param  int $customer_id customer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDevice[]
     */
    public function apiHeatDeviceGetForCustomerCustomerIDGet($customer_id, string $contentType = self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'][0])
    {
        list($response) = $this->apiHeatDeviceGetForCustomerCustomerIDGetWithHttpInfo($customer_id, $contentType);
        return $response;
    }

    /**
     * Operation apiHeatDeviceGetForCustomerCustomerIDGetWithHttpInfo
     *
     * @param  int $customer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDevice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDeviceGetForCustomerCustomerIDGetWithHttpInfo($customer_id, string $contentType = self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'][0])
    {
        $request = $this->apiHeatDeviceGetForCustomerCustomerIDGetRequest($customer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDevice[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDevice[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDevice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDeviceGetForCustomerCustomerIDGetAsync
     *
     * @param  int $customer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceGetForCustomerCustomerIDGetAsync($customer_id, string $contentType = self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'][0])
    {
        return $this->apiHeatDeviceGetForCustomerCustomerIDGetAsyncWithHttpInfo($customer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDeviceGetForCustomerCustomerIDGetAsyncWithHttpInfo
     *
     * @param  int $customer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceGetForCustomerCustomerIDGetAsyncWithHttpInfo($customer_id, string $contentType = self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDevice[]';
        $request = $this->apiHeatDeviceGetForCustomerCustomerIDGetRequest($customer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDeviceGetForCustomerCustomerIDGet'
     *
     * @param  int $customer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDeviceGetForCustomerCustomerIDGetRequest($customer_id, string $contentType = self::contentTypes['apiHeatDeviceGetForCustomerCustomerIDGet'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling apiHeatDeviceGetForCustomerCustomerIDGet'
            );
        }


        $resourcePath = '/api/HeatDevice/GetForCustomer/{CustomerID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CustomerID' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiHeatDeviceIdGet
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDevice
     */
    public function apiHeatDeviceIdGet($id, string $contentType = self::contentTypes['apiHeatDeviceIdGet'][0])
    {
        list($response) = $this->apiHeatDeviceIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiHeatDeviceIdGetWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdGet'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDevice, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDeviceIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiHeatDeviceIdGet'][0])
    {
        $request = $this->apiHeatDeviceIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDevice',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDevice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDevice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDeviceIdGetAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceIdGetAsync($id, string $contentType = self::contentTypes['apiHeatDeviceIdGet'][0])
    {
        return $this->apiHeatDeviceIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDeviceIdGetAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiHeatDeviceIdGet'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDevice';
        $request = $this->apiHeatDeviceIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDeviceIdGet'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDeviceIdGetRequest($id, string $contentType = self::contentTypes['apiHeatDeviceIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiHeatDeviceIdGet'
            );
        }


        $resourcePath = '/api/HeatDevice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiHeatDeviceIdPatch
     *
     * @param  int $id id (required)
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdPatch'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDeviceItemResponseModel
     */
    public function apiHeatDeviceIdPatch($id, $heat_device = null, string $contentType = self::contentTypes['apiHeatDeviceIdPatch'][0])
    {
        list($response) = $this->apiHeatDeviceIdPatchWithHttpInfo($id, $heat_device, $contentType);
        return $response;
    }

    /**
     * Operation apiHeatDeviceIdPatchWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdPatch'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDeviceItemResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDeviceIdPatchWithHttpInfo($id, $heat_device = null, string $contentType = self::contentTypes['apiHeatDeviceIdPatch'][0])
    {
        $request = $this->apiHeatDeviceIdPatchRequest($id, $heat_device, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDeviceIdPatchAsync
     *
     * @param  int $id (required)
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceIdPatchAsync($id, $heat_device = null, string $contentType = self::contentTypes['apiHeatDeviceIdPatch'][0])
    {
        return $this->apiHeatDeviceIdPatchAsyncWithHttpInfo($id, $heat_device, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDeviceIdPatchAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDeviceIdPatchAsyncWithHttpInfo($id, $heat_device = null, string $contentType = self::contentTypes['apiHeatDeviceIdPatch'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDeviceItemResponseModel';
        $request = $this->apiHeatDeviceIdPatchRequest($id, $heat_device, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDeviceIdPatch'
     *
     * @param  int $id (required)
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDeviceIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDeviceIdPatchRequest($id, $heat_device = null, string $contentType = self::contentTypes['apiHeatDeviceIdPatch'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiHeatDeviceIdPatch'
            );
        }



        $resourcePath = '/api/HeatDevice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($heat_device)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($heat_device));
            } else {
                $httpBody = $heat_device;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiHeatDevicePost
     *
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDevicePost'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FWGCentralAPI\Model\HeatDeviceItemResponseModel
     */
    public function apiHeatDevicePost($heat_device = null, string $contentType = self::contentTypes['apiHeatDevicePost'][0])
    {
        list($response) = $this->apiHeatDevicePostWithHttpInfo($heat_device, $contentType);
        return $response;
    }

    /**
     * Operation apiHeatDevicePostWithHttpInfo
     *
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDevicePost'] to see the possible values for this operation
     *
     * @throws \FWGCentralAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FWGCentralAPI\Model\HeatDeviceItemResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiHeatDevicePostWithHttpInfo($heat_device = null, string $contentType = self::contentTypes['apiHeatDevicePost'][0])
    {
        $request = $this->apiHeatDevicePostRequest($heat_device, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FWGCentralAPI\Model\HeatDeviceItemResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiHeatDevicePostAsync
     *
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDevicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDevicePostAsync($heat_device = null, string $contentType = self::contentTypes['apiHeatDevicePost'][0])
    {
        return $this->apiHeatDevicePostAsyncWithHttpInfo($heat_device, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiHeatDevicePostAsyncWithHttpInfo
     *
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDevicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiHeatDevicePostAsyncWithHttpInfo($heat_device = null, string $contentType = self::contentTypes['apiHeatDevicePost'][0])
    {
        $returnType = '\FWGCentralAPI\Model\HeatDeviceItemResponseModel';
        $request = $this->apiHeatDevicePostRequest($heat_device, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiHeatDevicePost'
     *
     * @param  \FWGCentralAPI\Model\HeatDevice|null $heat_device (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiHeatDevicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiHeatDevicePostRequest($heat_device = null, string $contentType = self::contentTypes['apiHeatDevicePost'][0])
    {



        $resourcePath = '/api/HeatDevice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($heat_device)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($heat_device));
            } else {
                $httpBody = $heat_device;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
